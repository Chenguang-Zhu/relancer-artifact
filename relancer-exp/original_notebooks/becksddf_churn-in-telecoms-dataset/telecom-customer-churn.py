#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../../../input/becksddf_churn-in-telecoms-dataset/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../../../input/becksddf_churn-in-telecoms-dataset"))

# Any results you write to the current directory are saved as output.


# In[ ]:


# Classification template

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
print(os.listdir("../../../input/becksddf_churn-in-telecoms-dataset"))

# Importing the dataset
dataset = pd.read_csv("../../../input/becksddf_churn-in-telecoms-dataset/bigml_59c28831336c6604c800002a.csv")
#Here i am removing the column which is not required for the model as it contains phone number 
dataset = dataset.drop(dataset.columns[[3]], axis=1)  

X = dataset.iloc[:, 0:19].values 
y = dataset.iloc[:, 19].values


# Encoding categorical data
# Here i am converting the alpha columns into numeric values so that Machine can understand and use it for prediction
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_0 = LabelEncoder()
X[:, 0] = labelencoder_X_0.fit_transform(X[:, 0])
labelencoder_y_0 = LabelEncoder()
y = labelencoder_y_0.fit_transform(y)
labelencoder_X_3 = LabelEncoder()
X[:, 3] = labelencoder_X_3.fit_transform(X[:, 3])
labelencoder_X_4 = LabelEncoder()
X[:, 4] = labelencoder_X_4.fit_transform(X[:, 4])


#coomneted because i dont know what will below will do and also it has created so many columns 
# We need to do this otherwise values generated by Encoder will have wrong effect on output
#onehotencoder = OneHotEncoder(categorical_features = [1])
#X = onehotencoder.fit_transform(X).toarray()

#X = X [:,1:]

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling
# This will make sure the values are scaled. ie Area code - 415 and customer service calls = 1 
#  vary large diff will cause the problem.
 
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


# Part 2 Now Let s make the ANN 

# importing the Keras and required packages 
import keras 
from keras.models import Sequential
from keras.layers import Dense

# Initialising the ANN 
classifier = Sequential()

# Adding the input layer and first hidden layer 
classifier.add(Dense(output_dim = 10, kernel_initializer = 'uniform', activation = 'relu' , input_dim = 19))

# Adding 2nd hidden layer
classifier.add(Dense(output_dim = 10, kernel_initializer = 'uniform', activation = 'relu'))

# Adding 2nd hidden layer
classifier.add(Dense(output_dim = 10, kernel_initializer = 'uniform', activation = 'relu'))

# Adding the final layer 
classifier.add(Dense(output_dim = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

#Compilling the ANN 
classifier.compile(optimizer = 'adam' , loss = 'binary_crossentropy' ,metrics = ['accuracy'])

#Fitting ANN to Training set 
classifier.fit(X_train,y_train,batch_size= 10, epochs = 50)

# Part 3 Making the predictions and evaluating the model 

# Fitting classifier to the Training set
# Create your classifier here

# Predicting the Test set results
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

